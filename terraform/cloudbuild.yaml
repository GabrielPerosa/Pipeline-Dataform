steps:
  # 1. Carregar o arquivo .env (se necessário, manter essa etapa)
  - id: 'load env'
    name: 'google/cloud-sdk'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Carregando variáveis do arquivo .env..."
        export $(cat .env | xargs) # Carrega as variáveis de ambiente do arquivo .env

  # 2. Configurar o Git no ambiente do Cloud Build
  - id: 'git config'
    name: 'alpine/git'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Configurando credenciais do Git..."
        git config --global user.name "$_GIT_USER_NAME"
        git config --global user.email "$_GIT_USER_EMAIL"

  # 3. Clonar o repositório usando o GIT_TOKEN
  - id: 'clone repo'
    name: 'alpine/git'
    entrypoint: 'sh'
    secretEnv:
      - GIT_TOKEN  # Aqui o GIT_TOKEN será acessado do Secret Manager
    args:
      - '-c'
      - |
        echo "Clonando o repositório..."
        git clone https://${GIT_USER_NAME}:${GIT_TOKEN}@github.com/seu_usuario/seu_repositorio.git
        git config --global user.email "${GIT_USER_EMAIL}"
        git config --global user.name "${GIT_USER_NAME}"

  # 4. Verificar novos commits
  - id: 'check commits'
    name: 'alpine/git'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
          cd Pipeline-Dataform
          echo "Verificando novos commits na branch $_FEATURE_NAME..."
          git checkout $_FEATURE_NAME
          git pull origin $_FEATURE_NAME
          if [ "$(git log origin/$_BRANCH_NAME..HEAD --oneline)" = "" ]; then
            echo "Nenhum novo commit encontrado na branch $_FEATURE_NAME. Finalizando o pipeline."
            exit 0
          fi
          echo "Novos commits encontrados na branch $_FEATURE_NAME."

  # 5. Fazer merge das branches
  - id: 'merge branch'
    name: 'alpine/git'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
          cd Pipeline-Dataform
          echo "Fazendo checkout da branch $_BRANCH_NAME..."
          git checkout $_BRANCH_NAME
          echo "Fazendo merge da branch $_FEATURE_NAME na $_BRANCH_NAME..."
          git merge $_FEATURE_NAME --no-ff -m "Merge automático do Cloud Build"
          echo "Push das mudanças para a branch $_BRANCH_NAME..."
          git push origin $_BRANCH_NAME

  # 6. Atualizar Dataform
  - id: 'dataform update'
    name: 'alpine'
    args:
      - sh
      - '-c'
      - |
          echo "Atualizando Dataform no GCP..."
          echo "Dataform atualizado com sucesso."
          echo "Tudo pronto."

# Substituições
substitutions:
  _BRANCH_NAME: 'feature/testes'
  _FEATURE_NAME: 'feature/testes-base'
  GIT_USER_NAME: 'GabrielPerosa'
  GIT_USER_EMAIL: 'gabrielperosa493@gmail.com'

# Permissões de acesso ao Secret Manager 
secrets:
  - secretEnv:
      GIT_TOKEN: projects/integracaohomologado/secrets/GIT_TOKEN/versions/latest

options:
  logging: CLOUD_LOGGING_ONLY